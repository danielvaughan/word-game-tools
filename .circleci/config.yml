workflows:
  version: 2
  build-deploy:
    jobs:
      - unit-test
      - package-docker:
          requires:
            - unit-test
          filters:
            branches:
              only: master
      - deploy-GCP:
          requires:
            - package-docker
          filters:
            branches:
              only: master

version: 2
jobs:
  unit-test:
    environment:
      CC_TEST_REPORTER_ID: $CC_TEST_REPORTER_ID
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    docker:
      - image: circleci/openjdk:8-jdk

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      # Setup Code Climate test-reporter
      - run:
          command: |
            # download test reporter as a static binary
                     curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
                     chmod +x ./cc-test-reporter
      # CC Test Before
      - run:
          command: ./cc-test-reporter before-build

      # run tests
      - run: gradle test

      - store_test_results:
          path: target/surefire-reports

      # Upload Coverage
      - run:
          command: |
            ./cc-test-reporter format-coverage -d -t jacoco
            ./cc-test-reporter upload-coverage -d


  package-docker:
    docker:
      - image: circleci/openjdk:8-jdk-browsers

    working_directory: ~/repo
    steps:
      - checkout

      # setup docker
      - setup_remote_docker

      # build the image
      - run: docker build -t $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_SHA1 .

      # login to docker hub
      - run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

      # deploy the image
      - run: docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_SHA1

      # update latest tag
      - run: docker tag $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_SHA1 $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:latest
      - run: docker push $DOCKER_USERNAME/$DOCKER_IMAGE_NAME:latest

  deploy-GCP:
    docker:
      - image: circleci/openjdk:8-jdk-browsers
    working_directory: ~/repo
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Install gcloud SDK
          command: |
            # Create environment variable for correct distribution
            export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"
            # Add the Cloud SDK distribution URI as a package source
            echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
            # Import the Google Cloud Platform public key
            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
            # Update the package list and install the Cloud SDK
            sudo apt-get update -y && sudo apt-get install -y google-cloud-sdk kubectl

      - run:
          name: Initialize & Authenticate gcloud SDK
          command: |
            echo "${GCP_KEY_FILE}" | base64 --decode >> /tmp/gcp_key.json
            gcloud auth activate-service-account --key-file /tmp/gcp_key.json
            gcloud config set project ${GCP_PROJECT}

            gcloud config set ${GCP_ZONE}
            gcloud container clusters get-credentials ${GKE_CLUSTER}

            echo "Deploying Image: ${DOCKER_IMAGE_NAME} to ${K8S_DEPLOYMENT} in ${K8S_NAMESPACE}"

            kubectl set image deployment/${K8S_DEPLOYMENT}  -n ${K8S_NAMESPACE} ${K8S_DEPLOYMENT}=${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:${CIRCLE_SHA1}

            kubectl rollout status deployment/${K8S_DEPLOYMENT} -n ${K8S_NAMESPACE}
